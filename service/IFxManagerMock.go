// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goFxAppManager/service (interfaces: IFxManager)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	messages "github.com/bhbosman/gocommon/messages"
	gomock "github.com/golang/mock/gomock"
)

// MockIFxManager is a mock of IFxManager interface.
type MockIFxManager struct {
	ctrl     *gomock.Controller
	recorder *MockIFxManagerMockRecorder
}

// MockIFxManagerMockRecorder is the mock recorder for MockIFxManager.
type MockIFxManagerMockRecorder struct {
	mock *MockIFxManager
}

// NewMockIFxManager creates a new mock instance.
func NewMockIFxManager(ctrl *gomock.Controller) *MockIFxManager {
	mock := &MockIFxManager{ctrl: ctrl}
	mock.recorder = &MockIFxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFxManager) EXPECT() *MockIFxManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIFxManager) Add(arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIFxManagerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIFxManager)(nil).Add), arg0, arg1)
}

// GetState mocks base method.
func (m *MockIFxManager) GetState() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockIFxManagerMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockIFxManager)(nil).GetState))
}

// Publish mocks base method.
func (m *MockIFxManager) Publish() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish")
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIFxManagerMockRecorder) Publish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIFxManager)(nil).Publish))
}

// Send mocks base method.
func (m *MockIFxManager) Send(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIFxManagerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIFxManager)(nil).Send), arg0)
}

// Start mocks base method.
func (m *MockIFxManager) Start(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIFxManagerMockRecorder) Start(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIFxManager)(nil).Start), varargs...)
}

// StartAll mocks base method.
func (m *MockIFxManager) StartAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAll indicates an expected call of StartAll.
func (mr *MockIFxManagerMockRecorder) StartAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockIFxManager)(nil).StartAll), arg0)
}

// Stop mocks base method.
func (m *MockIFxManager) Stop(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIFxManagerMockRecorder) Stop(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIFxManager)(nil).Stop), varargs...)
}

// StopAll mocks base method.
func (m *MockIFxManager) StopAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAll indicates an expected call of StopAll.
func (mr *MockIFxManagerMockRecorder) StopAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockIFxManager)(nil).StopAll), arg0)
}

// argNames: [arg0 arg1]
// defaultArgs: [gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any()
// argTypes: [string func() (messages.IApp, context.CancelFunc, error)]
// argString: arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error)
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnAddDoAndReturn(
	arg0, arg1 interface{},
	f func(arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error)) error) *gomock.Call {
	return mr.
		Add(arg0, arg1).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnAddDo(
	arg0, arg1 interface{},
	f func(arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error))) *gomock.Call {
	return mr.
		Add(arg0, arg1).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnAddDoAndReturnDefault(
	f func(arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error)) error) *gomock.Call {
	return mr.
		Add(gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnAddDoDefault(
	f func(arg0 string, arg1 func() (messages.IApp, context.CancelFunc, error))) *gomock.Call {
	return mr.
		Add(gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnAddReturn(
	arg0, arg1 interface{},
	ret0 error) *gomock.Call {
	return mr.
		Add(arg0, arg1).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnAddReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		Add(gomock.Any(), gomock.Any()).
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [[]string error]
// retString: []string, error
// retString:  ([]string, error)
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIFxManagerMockRecorder) OnGetStateDoAndReturn(
	f func() ([]string, error)) *gomock.Call {
	return mr.
		GetState().
		DoAndReturn(f)
}

// 0
func (mr *MockIFxManagerMockRecorder) OnGetStateDo(
	f func()) *gomock.Call {
	return mr.
		GetState().
		DoAndReturn(f)
}

// retNames: [ret0 ret1]
// retArgs: [ret0 []string ret1 error]
// retArgs22: ret0 []string,ret1 error
// 1
func (mr *MockIFxManagerMockRecorder) OnGetStateReturn(ret0 []string, ret1 error) *gomock.Call {
	return mr.
		GetState().
		Return(ret0, ret1)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [error]
// retString: error
// retString:  error
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIFxManagerMockRecorder) OnPublishDoAndReturn(
	f func() error) *gomock.Call {
	return mr.
		Publish().
		DoAndReturn(f)
}

// 0
func (mr *MockIFxManagerMockRecorder) OnPublishDo(
	f func()) *gomock.Call {
	return mr.
		Publish().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnPublishReturn(ret0 error) *gomock.Call {
	return mr.
		Publish().
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [interface{}]
// argString: arg0 interface{}
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnSendDoAndReturn(
	arg0 interface{},
	f func(arg0 interface{}) error) *gomock.Call {
	return mr.
		Send(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnSendDo(
	arg0 interface{},
	f func(arg0 interface{})) *gomock.Call {
	return mr.
		Send(arg0).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnSendDoAndReturnDefault(
	f func(arg0 interface{}) error) *gomock.Call {
	return mr.
		Send(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnSendDoDefault(
	f func(arg0 interface{})) *gomock.Call {
	return mr.
		Send(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnSendReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		Send(arg0).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnSendReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		Send(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0 arg1]
// defaultArgs: [gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any()
// argTypes: [context.Context ...string]
// argString: arg0 context.Context, arg1 ...string
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnStartDoAndReturn(
	arg0, arg1 interface{},
	f func(arg0 context.Context, arg1 ...string) error) *gomock.Call {
	return mr.
		Start(arg0, arg1).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartDo(
	arg0, arg1 interface{},
	f func(arg0 context.Context, arg1 ...string)) *gomock.Call {
	return mr.
		Start(arg0, arg1).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartDoAndReturnDefault(
	f func(arg0 context.Context, arg1 ...string) error) *gomock.Call {
	return mr.
		Start(gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartDoDefault(
	f func(arg0 context.Context, arg1 ...string)) *gomock.Call {
	return mr.
		Start(gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnStartReturn(
	arg0, arg1 interface{},
	ret0 error) *gomock.Call {
	return mr.
		Start(arg0, arg1).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		Start(gomock.Any(), gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		StartAll(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		StartAll(arg0).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		StartAll(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		StartAll(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		StartAll(arg0).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStartAllReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		StartAll(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0 arg1]
// defaultArgs: [gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any()
// argTypes: [context.Context ...string]
// argString: arg0 context.Context, arg1 ...string
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnStopDoAndReturn(
	arg0, arg1 interface{},
	f func(arg0 context.Context, arg1 ...string) error) *gomock.Call {
	return mr.
		Stop(arg0, arg1).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopDo(
	arg0, arg1 interface{},
	f func(arg0 context.Context, arg1 ...string)) *gomock.Call {
	return mr.
		Stop(arg0, arg1).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopDoAndReturnDefault(
	f func(arg0 context.Context, arg1 ...string) error) *gomock.Call {
	return mr.
		Stop(gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopDoDefault(
	f func(arg0 context.Context, arg1 ...string)) *gomock.Call {
	return mr.
		Stop(gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnStopReturn(
	arg0, arg1 interface{},
	ret0 error) *gomock.Call {
	return mr.
		Stop(arg0, arg1).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		Stop(gomock.Any(), gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		StopAll(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		StopAll(arg0).
		Do(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		StopAll(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		StopAll(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		StopAll(arg0).
		Return(ret0)
}

// 1
func (mr *MockIFxManagerMockRecorder) OnStopAllReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		StopAll(gomock.Any()).
		Return(ret0)
}
