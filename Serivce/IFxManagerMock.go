// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocommon/internal/Services/FxAppManagerService (interfaces: IFxManager)

// Package FxAppManagerService is a generated GoMock package.
package Serivce

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFxManager is a mock of IFxManager interface.
type MockIFxManager struct {
	ctrl     *gomock.Controller
	recorder *MockIFxManagerMockRecorder
}

// MockIFxManagerMockRecorder is the mock recorder for MockIFxManager.
type MockIFxManagerMockRecorder struct {
	mock *MockIFxManager
}

// NewMockIFxManager creates a new mock instance.
func NewMockIFxManager(ctrl *gomock.Controller) *MockIFxManager {
	mock := &MockIFxManager{ctrl: ctrl}
	mock.recorder = &MockIFxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFxManager) EXPECT() *MockIFxManagerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockIFxManager) Start(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIFxManagerMockRecorder) Start(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIFxManager)(nil).Start), varargs...)
}

// StartAll mocks base method.
func (m *MockIFxManager) StartAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAll indicates an expected call of StartAll.
func (mr *MockIFxManagerMockRecorder) StartAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockIFxManager)(nil).StartAll), arg0)
}

// Stop mocks base method.
func (m *MockIFxManager) Stop(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIFxManagerMockRecorder) Stop(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIFxManager)(nil).Stop), varargs...)
}

// StopAll mocks base method.
func (m *MockIFxManager) StopAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAll indicates an expected call of StopAll.
func (mr *MockIFxManagerMockRecorder) StopAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockIFxManager)(nil).StopAll), arg0)
}

// argNames: [arg0 arg1]
// argTypes: [context.Context ...string]
// argString: arg0 context.Context, arg1 ...string
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: m
func ExtendMockIFxManagerStartDoAndReturn(c *gomock.Call) {
}

func ExtendMockIFxManagerStartDo(c *gomock.Call) {
}

func ExtendMockIFxManagerStartReturn(c *gomock.Call) {
}

// argNames: [arg0]
// argTypes: [context.Context]
// argString: arg0 context.Context
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: m
func ExtendMockIFxManagerStartAllDoAndReturn(c *gomock.Call) {
}

func ExtendMockIFxManagerStartAllDo(c *gomock.Call) {
}

func ExtendMockIFxManagerStartAllReturn(c *gomock.Call) {
}

// argNames: [arg0 arg1]
// argTypes: [context.Context ...string]
// argString: arg0 context.Context, arg1 ...string
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: m
func ExtendMockIFxManagerStopDoAndReturn(c *gomock.Call) {
}

func ExtendMockIFxManagerStopDo(c *gomock.Call) {
}

func ExtendMockIFxManagerStopReturn(c *gomock.Call) {
}

// argNames: [arg0]
// argTypes: [context.Context]
// argString: arg0 context.Context
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: m
func ExtendMockIFxManagerStopAllDoAndReturn(c *gomock.Call) {
}

func ExtendMockIFxManagerStopAllDo(c *gomock.Call) {
}

func ExtendMockIFxManagerStopAllReturn(c *gomock.Call) {
}
